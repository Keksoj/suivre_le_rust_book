// rust a des types statiques (statically typed)
// chaque variable doit avoir un type pour compiler

// 4 types scalaires : entiers, nombres flottants, bool√©ens, caract√®res
    // les entiers, sans signe (u) et avec signe (i) et leur nombre de bit (i32)
    // les nombres √† virgule flottante, f64 et f32
    // bool√©en, true et false (√ßa prend un octet de m√©moire)
    // les caract√®res, introduit par des guillemets simples ' '

// Types compos√©s (compound types), de deux sortes
    // n-uplets (tuples). Leur longueur est d√©clar√©e, et ne bouge plus
    // Les 'arrays', ou tableaux

// Int√©ressant : le compilateur va signaler des erreurs (d'indexation par exemple)
// plus rigoureusement que dans d'autres langages.

fn main() {
   
    // nombres √† virgule flottante (floating-point), pr√©fixe f et nombre de bits
    // f64 par d√©faut pour x
    let x = 2.0; 
    // pr√©cisons qu'on veut du f32
    let y: f32 = 3.0; 
    println!("x = {} et y = {}", x, y);

    // quelques op√©rations
    let somme = 5 + 10;
    let difference = 95.5 - 4.3;
    let produit = 4 * 30;
    let quotient = 56.7 / 32.2;
    let reste = 43 % 5;
    println!("somme = {}, diff√©rence = {}, produit = {}, quotient = {}, reste = {}",
            somme, difference, produit, quotient, reste);
    
    // on d√©clare les variables bol√©ennes simplement
    let t = true;
    // ou bien on pr√©cise le type
    let f: bool = false;
    println!("Vrai c'est {}, faux c'est {}", t, f);
    // les bool√©ennes ne sont concr√®tement utilisable que dans les conditions (if)

    // les caract√®res. L'UTF-8 passe, mais c'est quand m√™me pas id√©al
    let c = 'z';
    let o = "≈í";
    let heart_eyed_cat = 'üòª'; // je savais pas que c'√©tait de l'unicode !
    println!("On peut utiliser des caract√®res comme des nombres : \
            {} {} {}", c, o, heart_eyed_cat);


// les variables compos√©es

//n-uplets ou tuples
    // cr√©ons un n-uplets de trois termes, avec un type par position
    let nuplet: (i32, f64, u8) = (500, 6.4, 1);
    println!("Afficher un n-uplet (tuple) n'est pas facile.");

    // on peut d√©structurer le nuplet, y mettre trois variables
    let (_l, _m, _n) = nuplet;
    println! ("Mais on peut afficher ses √©l√©ments s√©par√©ment. \
                Le deuxi√®me √©l√©ment de notre n-uplet est _m : {}", _m);

    // on peut acc√©der √† un √©l√©ment du n-uplet avec un point et un num√©ro
    // attention ! On compte √† partir de z√©ro !
    let v: (i32, f64, u8) = (-400, 45.12, 25);
    println!("Imprimons le deuxi√®me terme de v avec 'v.1' : {}", v.1);

// Arrays ou tableaux
    // Dans un array, tous les √©l√©ments sont de m√™me type
    // La longueur d'un array est fixe. 
    // Mieux vaudra utiliser un vecteur pour le faire cro√Ætre.
    let _ar = [1, 2, 3, 4, 5];
   
    // comme on n'a pas plus de douze mois dans l'ann√©e, on peut utiliser un array
    let mois =["Janvier", "F√©vrier", "Mars", "Avril", "Mai", "Juin", 
                "Juillet", "Ao√ªt", "Septembre", "Octobre", "Novembre", "D√©cembre"];
    // pour imprimer un √©l√©ment, utiliser l'indexation des array avec des []
    println!("Pas facile d'afficher un array. Mais on peut imprimer un √©l√©ment. \
         Troisi√®me mois de l'ann√©e : {}", mois[2]);
            
    // pour pr√©ciser le type d'un array, on fait [type; nombre d'√©l√©ments]
    let a: [i32; 5] = [1, 2, 3, 4, 5];

} 


